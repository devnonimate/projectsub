var UnityLoader = UnityLoader || { Compression: { identity: { require: function() { return {} }, decompress: function(e) { return e } }, gzip: { require: function(e) { var t = { "inflate.js": function(e, t, r) { "use strict"; function n(e) { if (!(this instanceof n)) return new n(e); this.options = s.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e || {}); var t = this.options; t.raw && t.windowBits >= 0 && t.windowBits < 16 && (t.windowBits = -t.windowBits, 0 === t.windowBits && (t.windowBits = -15)), !(t.windowBits >= 0 && t.windowBits < 16) || e && e.windowBits || (t.windowBits += 32), t.windowBits > 15 && t.windowBits < 48 && 0 == (15 & t.windowBits) && (t.windowBits |= 15), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new c, this.strm.avail_out = 0; var r = a.inflateInit2(this.strm, t.windowBits); if (r !== l.Z_OK) throw new Error(u[r]); this.header = new f, a.inflateGetHeader(this.strm, this.header) } function o(e, t) { var r = new n(t); if (r.push(e, !0), r.err) throw r.msg || u[r.err]; return r.result } function i(e, t) { return t = t || {}, t.raw = !0, o(e, t) } var a = e("./zlib/inflate"), s = e("./utils/common"), d = e("./utils/strings"), l = e("./zlib/constants"), u = e("./zlib/messages"), c = e("./zlib/zstream"), f = e("./zlib/gzheader"), h = Object.prototype.toString; n.prototype.push = function(e, t) { var r, n, o, i, u, c, f = this.strm, p = this.options.chunkSize, m = this.options.dictionary, w = !1; if (this.ended) return !1; n = t === ~~t ? t : !0 === t ? l.Z_FINISH : l.Z_NO_FLUSH, "string" == typeof e ? f.input = d.binstring2buf(e) : "[object ArrayBuffer]" === h.call(e) ? f.input = new Uint8Array(e) : f.input = e, f.next_in = 0, f.avail_in = f.input.length; do { if (0 === f.avail_out && (f.output = new s.Buf8(p), f.next_out = 0, f.avail_out = p), r = a.inflate(f, l.Z_NO_FLUSH), r === l.Z_NEED_DICT && m && (c = "string" == typeof m ? d.string2buf(m) : "[object ArrayBuffer]" === h.call(m) ? new Uint8Array(m) : m, r = a.inflateSetDictionary(this.strm, c)), r === l.Z_BUF_ERROR && !0 === w && (r = l.Z_OK, w = !1), r !== l.Z_STREAM_END && r !== l.Z_OK) return this.onEnd(r), this.ended = !0, !1; f.next_out && (0 !== f.avail_out && r !== l.Z_STREAM_END && (0 !== f.avail_in || n !== l.Z_FINISH && n !== l.Z_SYNC_FLUSH) || ("string" === this.options.to ? (o = d.utf8border(f.output, f.next_out), i = f.next_out - o, u = d.buf2string(f.output, o), f.next_out = i, f.avail_out = p - i, i && s.arraySet(f.output, f.output, o, i, 0), this.onData(u)) : this.onData(s.shrinkBuf(f.output, f.next_out)))), 0 === f.avail_in && 0 === f.avail_out && (w = !0) } while ((f.avail_in > 0 || 0 === f.avail_out) && r !== l.Z_STREAM_END); return r === l.Z_STREAM_END && (n = l.Z_FINISH), n === l.Z_FINISH ? (r = a.inflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === l.Z_OK) : n !== l.Z_SYNC_FLUSH || (this.onEnd(l.Z_OK), f.avail_out = 0, !0) }, n.prototype.onData = function(e) { this.chunks.push(e) }, n.prototype.onEnd = function(e) { e === l.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = s.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg }, r.Inflate = n, r.inflate = o, r.inflateRaw = i, r.ungzip = o }, "utils/common.js": function(e, t, r) { "use strict"; var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array; r.assign = function(e) { for (var t = Array.prototype.slice.call(arguments, 1); t.length;) { var r = t.shift(); if (r) { if ("object" != typeof r) throw new TypeError(r + "must be non-object"); for (var n in r) r.hasOwnProperty(n) && (e[n] = r[n]) } } return e }, r.shrinkBuf = function(e, t) { return e.length === t ? e : e.subarray ? e.subarray(0, t) : (e.length = t, e) }; var o = { arraySet: function(e, t, r, n, o) { if (t.subarray && e.subarray) return void e.set(t.subarray(r, r + n), o); for (var i = 0; i < n; i++) e[o + i] = t[r + i] }, flattenChunks: function(e) { var t, r, n, o, i, a; for (n = 0, t = 0, r = e.length; t < r; t++) n += e[t].length; for (a = new Uint8Array(n), o = 0, t = 0, r = e.length; t < r; t++) i = e[t], a.set(i, o), o += i.length; return a } }, i = { arraySet: function(e, t, r, n, o) { for (var i = 0; i < n; i++) e[o + i] = t[r + i] }, flattenChunks: function(e) { return [].concat.apply([], e) } }; r.setTyped = function(e) { e ? (r.Buf8 = Uint8Array, r.Buf16 = Uint16Array, r.Buf32 = Int32Array, r.assign(r, o)) : (r.Buf8 = Array, r.Buf16 = Array, r.Buf32 = Array, r.assign(r, i)) }, r.setTyped(n) }, "utils/strings.js": function(e, t, r) { "use strict"; function n(e, t) { if (t < 65537 && (e.subarray && a || !e.subarray && i)) return String.fromCharCode.apply(null, o.shrinkBuf(e, t)); for (var r = "", n = 0; n < t; n++) r += String.fromCharCode(e[n]); return r } var o = e("./common"), i = !0, a = !0; try { String.fromCharCode.apply(null, [0]) } catch (e) { i = !1 } try { String.fromCharCode.apply(null, new Uint8Array(1)) } catch (e) { a = !1 } for (var s = new o.Buf8(256), d = 0; d < 256; d++) s[d] = d >= 252 ? 6 : d >= 248 ? 5 : d >= 240 ? 4 : d >= 224 ? 3 : d >= 192 ? 2 : 1; s[254] = s[254] = 1, r.string2buf = function(e) { var t, r, n, i, a, s = e.length, d = 0; for (i = 0; i < s; i++) r = e.charCodeAt(i), 55296 == (64512 & r) && i + 1 < s && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), d += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4; for (t = new o.Buf8(d), a = 0, i = 0; a < d; i++) r = e.charCodeAt(i), 55296 == (64512 & r) && i + 1 < s && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), r < 128 ? t[a++] = r : r < 2048 ? (t[a++] = 192 | r >>> 6, t[a++] = 128 | 63 & r) : r < 65536 ? (t[a++] = 224 | r >>> 12, t[a++] = 128 | r >>> 6 & 63, t[a++] = 128 | 63 & r) : (t[a++] = 240 | r >>> 18, t[a++] = 128 | r >>> 12 & 63, t[a++] = 128 | r >>> 6 & 63, t[a++] = 128 | 63 & r); return t }, r.buf2binstring = function(e) { return n(e, e.length) }, r.binstring2buf = function(e) { for (var t = new o.Buf8(e.length), r = 0, n = t.length; r < n; r++) t[r] = e.charCodeAt(r); return t }, r.buf2string = function(e, t) { var r, o, i, a, d = t || e.length, l = new Array(2 * d); for (o = 0, r = 0; r < d;) if ((i = e[r++]) < 128) l[o++] = i; else if ((a = s[i]) > 4) l[o++] = 65533, r += a - 1; else { for (i &= 2 === a ? 31 : 3 === a ? 15 : 7; a > 1 && r < d;) i = i << 6 | 63 & e[r++], a--; a > 1 ? l[o++] = 65533 : i < 65536 ? l[o++] = i : (i -= 65536, l[o++] = 55296 | i >> 10 & 1023, l[o++] = 56320 | 1023 & i) } return n(l, o) }, r.utf8border = function(e, t) { var r; for (t = t || e.length, t > e.length && (t = e.length), r = t - 1; r >= 0 && 128 == (192 & e[r]);) r--; return r < 0 ? t : 0 === r ? t : r + s[e[r]] > t ? r : t } }, "zlib/inflate.js": function(e, t, r) { "use strict"; function n(e) { return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24) } function o() { this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new y.Buf16(320), this.work = new y.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0 } function i(e) { var t; return e && e.state ? (t = e.state, e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = P, t.last = 0, t.havedict = 0, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new y.Buf32(me), t.distcode = t.distdyn = new y.Buf32(we), t.sane = 1, t.back = -1, M) : R } function a(e) { var t; return e && e.state ? (t = e.state, t.wsize = 0, t.whave = 0, t.wnext = 0, i(e)) : R } function s(e, t) { var r, n; return e && e.state ? (n = e.state, t < 0 ? (r = 0, t = -t) : (r = 1 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || t > 15) ? R : (null !== n.window && n.wbits !== t && (n.window = null), n.wrap = r, n.wbits = t, a(e))) : R } function d(e, t) { var r, n; return e ? (n = new o, e.state = n, n.window = null, r = s(e, t), r !== M && (e.state = null), r) : R } function l(e) { return d(e, ye) } function u(e) { if (ge) { var t; for (w = new y.Buf32(512), b = new y.Buf32(32), t = 0; t < 144;) e.lens[t++] = 8; for (; t < 256;) e.lens[t++] = 9; for (; t < 280;) e.lens[t++] = 7; for (; t < 288;) e.lens[t++] = 8; for (U(E, e.lens, 0, 288, w, 0, e.work, { bits: 9 }), t = 0; t < 32;) e.lens[t++] = 5; U(k, e.lens, 0, 32, b, 0, e.work, { bits: 5 }), ge = !1 } e.lencode = w, e.lenbits = 9, e.distcode = b, e.distbits = 5 } function c(e, t, r, n) { var o, i = e.state; return null === i.window && (i.wsize = 1 << i.wbits, i.wnext = 0, i.whave = 0, i.window = new y.Buf8(i.wsize)), n >= i.wsize ? (y.arraySet(i.window, t, r - i.wsize, i.wsize, 0), i.wnext = 0, i.whave = i.wsize) : (o = i.wsize - i.wnext, o > n && (o = n), y.arraySet(i.window, t, r - n, o, i.wnext), n -= o, n ? (y.arraySet(i.window, t, r - n, n, 0), i.wnext = n, i.whave = i.wsize) : (i.wnext += o, i.wnext === i.wsize && (i.wnext = 0), i.whave < i.wsize && (i.whave += o))), 0 } function f(e, t) { var r, o, i, a, s, d, l, f, h, p, m, w, b, me, we, be, ye, ge, ve, Ae, Ue, xe, Ee, ke, Be = 0, Le = new y.Buf8(4), We = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]; if (!e || !e.state || !e.output || !e.input && 0 !== e.avail_in) return R; r = e.state, r.mode === j && (r.mode = X), s = e.next_out, i = e.output, l = e.avail_out, a = e.next_in, o = e.input, d = e.avail_in, f = r.hold, h = r.bits, p = d, m = l, xe = M; e: for (;;) switch (r.mode) { case P: if (0 === r.wrap) { r.mode = X; break } for (; h < 16;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (2 & r.wrap && 35615 === f) { r.check = 0, Le[0] = 255 & f, Le[1] = f >>> 8 & 255, r.check = v(r.check, Le, 2, 0), f = 0, h = 0, r.mode = T; break } if (r.flags = 0, r.head && (r.head.done = !1), !(1 & r.wrap) || (((255 & f) << 8) + (f >> 8)) % 31) { e.msg = "incorrect header check", r.mode = fe; break } if ((15 & f) !== S) { e.msg = "unknown compression method", r.mode = fe; break } if (f >>>= 4, h -= 4, Ue = 8 + (15 & f), 0 === r.wbits) r.wbits = Ue; else if (Ue > r.wbits) { e.msg = "invalid window size", r.mode = fe; break } r.dmax = 1 << Ue, e.adler = r.check = 1, r.mode = 512 & f ? G : j, f = 0, h = 0; break; case T: for (; h < 16;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (r.flags = f, (255 & r.flags) !== S) { e.msg = "unknown compression method", r.mode = fe; break } if (57344 & r.flags) { e.msg = "unknown header flags set", r.mode = fe; break } r.head && (r.head.text = f >> 8 & 1), 512 & r.flags && (Le[0] = 255 & f, Le[1] = f >>> 8 & 255, r.check = v(r.check, Le, 2, 0)), f = 0, h = 0, r.mode = D; case D: for (; h < 32;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } r.head && (r.head.time = f), 512 & r.flags && (Le[0] = 255 & f, Le[1] = f >>> 8 & 255, Le[2] = f >>> 16 & 255, Le[3] = f >>> 24 & 255, r.check = v(r.check, Le, 4, 0)), f = 0, h = 0, r.mode = F; case F: for (; h < 16;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } r.head && (r.head.xflags = 255 & f, r.head.os = f >> 8), 512 & r.flags && (Le[0] = 255 & f, Le[1] = f >>> 8 & 255, r.check = v(r.check, Le, 2, 0)), f = 0, h = 0, r.mode = z; case z: if (1024 & r.flags) { for (; h < 16;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } r.length = f, r.head && (r.head.extra_len = f), 512 & r.flags && (Le[0] = 255 & f, Le[1] = f >>> 8 & 255, r.check = v(r.check, Le, 2, 0)), f = 0, h = 0 } else r.head && (r.head.extra = null); r.mode = V; case V: if (1024 & r.flags && (w = r.length, w > d && (w = d), w && (r.head && (Ue = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), y.arraySet(r.head.extra, o, a, w, Ue)), 512 & r.flags && (r.check = v(r.check, o, w, a)), d -= w, a += w, r.length -= w), r.length)) break e; r.length = 0, r.mode = q; case q: if (2048 & r.flags) { if (0 === d) break e; w = 0; do { Ue = o[a + w++], r.head && Ue && r.length < 65536 && (r.head.name += String.fromCharCode(Ue)) } while (Ue && w < d); if (512 & r.flags && (r.check = v(r.check, o, w, a)), d -= w, a += w, Ue) break e } else r.head && (r.head.name = null); r.length = 0, r.mode = Z; case Z: if (4096 & r.flags) { if (0 === d) break e; w = 0; do { Ue = o[a + w++], r.head && Ue && r.length < 65536 && (r.head.comment += String.fromCharCode(Ue)) } while (Ue && w < d); if (512 & r.flags && (r.check = v(r.check, o, w, a)), d -= w, a += w, Ue) break e } else r.head && (r.head.comment = null); r.mode = Y; case Y: if (512 & r.flags) { for (; h < 16;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (f !== (65535 & r.check)) { e.msg = "header crc mismatch", r.mode = fe; break } f = 0, h = 0 } r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), e.adler = r.check = 0, r.mode = j; break; case G: for (; h < 32;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } e.adler = r.check = n(f), f = 0, h = 0, r.mode = J; case J: if (0 === r.havedict) return e.next_out = s, e.avail_out = l, e.next_in = a, e.avail_in = d, r.hold = f, r.bits = h, N; e.adler = r.check = 1, r.mode = j; case j: if (t === L || t === W) break e; case X: if (r.last) { f >>>= 7 & h, h -= 7 & h, r.mode = le; break } for (; h < 3;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } switch (r.last = 1 & f, f >>>= 1, h -= 1, 3 & f) { case 0: r.mode = K; break; case 1: if (u(r), r.mode = re, t === W) { f >>>= 2, h -= 2; break e } break; case 2: r.mode = $; break; case 3: e.msg = "invalid block type", r.mode = fe } f >>>= 2, h -= 2; break; case K: for (f >>>= 7 & h, h -= 7 & h; h < 32;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if ((65535 & f) != (f >>> 16 ^ 65535)) { e.msg = "invalid stored block lengths", r.mode = fe; break } if (r.length = 65535 & f, f = 0, h = 0, r.mode = Q, t === W) break e; case Q: r.mode = _; case _: if (w = r.length) { if (w > d && (w = d), w > l && (w = l), 0 === w) break e; y.arraySet(i, o, a, w, s), d -= w, a += w, l -= w, s += w, r.length -= w; break } r.mode = j; break; case $: for (; h < 14;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (r.nlen = 257 + (31 & f), f >>>= 5, h -= 5, r.ndist = 1 + (31 & f), f >>>= 5, h -= 5, r.ncode = 4 + (15 & f), f >>>= 4, h -= 4, r.nlen > 286 || r.ndist > 30) { e.msg = "too many length or distance symbols", r.mode = fe; break } r.have = 0, r.mode = ee; case ee: for (; r.have < r.ncode;) { for (; h < 3;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } r.lens[We[r.have++]] = 7 & f, f >>>= 3, h -= 3 } for (; r.have < 19;) r.lens[We[r.have++]] = 0; if (r.lencode = r.lendyn, r.lenbits = 7, Ee = { bits: r.lenbits }, xe = U(x, r.lens, 0, 19, r.lencode, 0, r.work, Ee), r.lenbits = Ee.bits, xe) { e.msg = "invalid code lengths set", r.mode = fe; break } r.have = 0, r.mode = te; case te: for (; r.have < r.nlen + r.ndist;) { for (; Be = r.lencode[f & (1 << r.lenbits) - 1], we = Be >>> 24, be = Be >>> 16 & 255, ye = 65535 & Be, !(we <= h);) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (ye < 16) f >>>= we, h -= we, r.lens[r.have++] = ye; else { if (16 === ye) { for (ke = we + 2; h < ke;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (f >>>= we, h -= we, 0 === r.have) { e.msg = "invalid bit length repeat", r.mode = fe; break } Ue = r.lens[r.have - 1], w = 3 + (3 & f), f >>>= 2, h -= 2 } else if (17 === ye) { for (ke = we + 3; h < ke;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } f >>>= we, h -= we, Ue = 0, w = 3 + (7 & f), f >>>= 3, h -= 3 } else { for (ke = we + 7; h < ke;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } f >>>= we, h -= we, Ue = 0, w = 11 + (127 & f), f >>>= 7, h -= 7 } if (r.have + w > r.nlen + r.ndist) { e.msg = "invalid bit length repeat", r.mode = fe; break } for (; w--;) r.lens[r.have++] = Ue } } if (r.mode === fe) break; if (0 === r.lens[256]) { e.msg = "invalid code -- missing end-of-block", r.mode = fe; break } if (r.lenbits = 9, Ee = { bits: r.lenbits }, xe = U(E, r.lens, 0, r.nlen, r.lencode, 0, r.work, Ee), r.lenbits = Ee.bits, xe) { e.msg = "invalid literal/lengths set", r.mode = fe; break } if (r.distbits = 6, r.distcode = r.distdyn, Ee = { bits: r.distbits }, xe = U(k, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, Ee), r.distbits = Ee.bits, xe) { e.msg = "invalid distances set", r.mode = fe; break } if (r.mode = re, t === W) break e; case re: r.mode = ne; case ne: if (d >= 6 && l >= 258) { e.next_out = s, e.avail_out = l, e.next_in = a, e.avail_in = d, r.hold = f, r.bits = h, A(e, m), s = e.next_out, i = e.output, l = e.avail_out, a = e.next_in, o = e.input, d = e.avail_in, f = r.hold, h = r.bits, r.mode === j && (r.back = -1); break } for (r.back = 0; Be = r.lencode[f & (1 << r.lenbits) - 1], we = Be >>> 24, be = Be >>> 16 & 255, ye = 65535 & Be, !(we <= h);) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (be && 0 == (240 & be)) { for (ge = we, ve = be, Ae = ye; Be = r.lencode[Ae + ((f & (1 << ge + ve) - 1) >> ge)], we = Be >>> 24, be = Be >>> 16 & 255, ye = 65535 & Be, !(ge + we <= h);) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } f >>>= ge, h -= ge, r.back += ge } if (f >>>= we, h -= we, r.back += we, r.length = ye, 0 === be) { r.mode = de; break } if (32 & be) { r.back = -1, r.mode = j; break } if (64 & be) { e.msg = "invalid literal/length code", r.mode = fe; break } r.extra = 15 & be, r.mode = oe; case oe: if (r.extra) { for (ke = r.extra; h < ke;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } r.length += f & (1 << r.extra) - 1, f >>>= r.extra, h -= r.extra, r.back += r.extra } r.was = r.length, r.mode = ie; case ie: for (; Be = r.distcode[f & (1 << r.distbits) - 1], we = Be >>> 24, be = Be >>> 16 & 255, ye = 65535 & Be, !(we <= h);) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (0 == (240 & be)) { for (ge = we, ve = be, Ae = ye; Be = r.distcode[Ae + ((f & (1 << ge + ve) - 1) >> ge)], we = Be >>> 24, be = Be >>> 16 & 255, ye = 65535 & Be, !(ge + we <= h);) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } f >>>= ge, h -= ge, r.back += ge } if (f >>>= we, h -= we, r.back += we, 64 & be) { e.msg = "invalid distance code", r.mode = fe; break } r.offset = ye, r.extra = 15 & be, r.mode = ae; case ae: if (r.extra) { for (ke = r.extra; h < ke;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } r.offset += f & (1 << r.extra) - 1, f >>>= r.extra, h -= r.extra, r.back += r.extra } if (r.offset > r.dmax) { e.msg = "invalid distance too far back", r.mode = fe; break } r.mode = se; case se: if (0 === l) break e; if (w = m - l, r.offset > w) { if ((w = r.offset - w) > r.whave && r.sane) { e.msg = "invalid distance too far back", r.mode = fe; break } w > r.wnext ? (w -= r.wnext, b = r.wsize - w) : b = r.wnext - w, w > r.length && (w = r.length), me = r.window } else me = i, b = s - r.offset, w = r.length; w > l && (w = l), l -= w, r.length -= w; do { i[s++] = me[b++] } while (--w); 0 === r.length && (r.mode = ne); break; case de: if (0 === l) break e; i[s++] = r.length, l--, r.mode = ne; break; case le: if (r.wrap) { for (; h < 32;) { if (0 === d) break e; d--, f |= o[a++] << h, h += 8 } if (m -= l, e.total_out += m, r.total += m, m && (e.adler = r.check = r.flags ? v(r.check, i, m, s - m) : g(r.check, i, m, s - m)), m = l, (r.flags ? f : n(f)) !== r.check) { e.msg = "incorrect data check", r.mode = fe; break } f = 0, h = 0 } r.mode = ue; case ue: if (r.wrap && r.flags) { for (; h < 32;) { if (0 === d) break e; d--, f += o[a++] << h, h += 8 } if (f !== (4294967295 & r.total)) { e.msg = "incorrect length check", r.mode = fe; break } f = 0, h = 0 } r.mode = ce; case ce: xe = O; break e; case fe: xe = C; break e; case he: return I; case pe: default: return R } return e.next_out = s, e.avail_out = l, e.next_in = a, e.avail_in = d, r.hold = f, r.bits = h, (r.wsize || m !== e.avail_out && r.mode < fe && (r.mode < le || t !== B)) && c(e, e.output, e.next_out, m - e.avail_out) ? (r.mode = he, I) : (p -= e.avail_in, m -= e.avail_out, e.total_in += p, e.total_out += m, r.total += m, r.wrap && m && (e.adler = r.check = r.flags ? v(r.check, i, m, e.next_out - m) : g(r.check, i, m, e.next_out - m)), e.data_type = r.bits + (r.last ? 64 : 0) + (r.mode === j ? 128 : 0) + (r.mode === re || r.mode === Q ? 256 : 0), (0 === p && 0 === m || t === B) && xe === M && (xe = H), xe) } function h(e) { if (!e || !e.state) return R; var t = e.state; return t.window && (t.window = null), e.state = null, M } function p(e, t) { var r; return e && e.state ? (r = e.state, 0 == (2 & r.wrap) ? R : (r.head = t, t.done = !1, M)) : R } function m(e, t) { var r, n, i = t.length; return e && e.state ? (r = e.state, 0 !== r.wrap && r.mode !== J ? R : r.mode === J && (n = 1, (n = g(n, t, i, 0)) !== r.check) ? C : c(e, t, i, i) ? (r.mode = he, I) : (r.havedict = 1, M)) : R } var w, b, y = e("../utils/common"), g = e("./adler32"), v = e("./crc32"), A = e("./inffast"), U = e("./inftrees"), x = 0, E = 1, k = 2, B = 4, L = 5, W = 6, M = 0, O = 1, N = 2, R = -2, C = -3, I = -4, H = -5, S = 8, P = 1, T = 2, D = 3, F = 4, z = 5, V = 6, q = 7, Z = 8, Y = 9, G = 10, J = 11, j = 12, X = 13, K = 14, Q = 15, _ = 16, $ = 17, ee = 18, te = 19, re = 20, ne = 21, oe = 22, ie = 23, ae = 24, se = 25, de = 26, le = 27, ue = 28, ce = 29, fe = 30, he = 31, pe = 32, me = 852, we = 592, ye = 15, ge = !0; r.inflateReset = a, r.inflateReset2 = s, r.inflateResetKeep = i, r.inflateInit = l, r.inflateInit2 = d, r.inflate = f, r.inflateEnd = h, r.inflateGetHeader = p, r.inflateSetDictionary = m, r.inflateInfo = "pako inflate (from Nodeca project)" }, "zlib/constants.js": function(e, t, r) { "use strict"; t.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 } }, "zlib/messages.js": function(e, t, r) { "use strict"; t.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" } }, "zlib/zstream.js": function(e, t, r) { "use strict"; function n() { this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0 } t.exports = n }, "zlib/gzheader.js": function(e, t, r) { "use strict"; function n() { this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1 } t.exports = n }, "zlib/adler32.js": function(e, t, r) { "use strict"; function n(e, t, r, n) { for (var o = 65535 & e | 0, i = e >>> 16 & 65535 | 0, a = 0; 0 !== r;) { a = r > 2e3 ? 2e3 : r, r -= a; do { o = o + t[n++] | 0, i = i + o | 0 } while (--a); o %= 65521, i %= 65521 } return o | i << 16 | 0 } t.exports = n }, "zlib/crc32.js": function(e, t, r) { "use strict"; function o(e, t, r, n) { var o = i, a = n + r; e ^= -1; for (var s = n; s < a; s++) e = e >>> 8 ^ o[255 & (e ^ t[s])]; return -1 ^ e } var i = function() { for (var e, t = [], r = 0; r < 256; r++) { e = r; for (var n = 0; n < 8; n++) e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1; t[r] = e } return t }(); t.exports = o }, "zlib/inffast.js": function(e, t, r) { "use strict"; t.exports = function(e, t) { var r, i, a, s, d, l, u, c, f, h, p, m, w, b, y, g, v, A, U, x, E, k, B, L, W; r = e.state, i = e.next_in, L = e.input, a = i + (e.avail_in - 5), s = e.next_out, W = e.output, d = s - (t - e.avail_out), l = s + (e.avail_out - 257), u = r.dmax, c = r.wsize, f = r.whave, h = r.wnext, p = r.window, m = r.hold, w = r.bits, b = r.lencode, y = r.distcode, g = (1 << r.lenbits) - 1, v = (1 << r.distbits) - 1; e: do { w < 15 && (m += L[i++] << w, w += 8, m += L[i++] << w, w += 8), A = b[m & g]; t: for (;;) { if (U = A >>> 24, m >>>= U, w -= U, 0 === (U = A >>> 16 & 255)) W[s++] = 65535 & A; else { if (!(16 & U)) { if (0 == (64 & U)) { A = b[(65535 & A) + (m & (1 << U) - 1)]; continue t } if (32 & U) { r.mode = 12; break e } e.msg = "invalid literal/length code", r.mode = 30; break e } x = 65535 & A, U &= 15, U && (w < U && (m += L[i++] << w, w += 8), x += m & (1 << U) - 1, m >>>= U, w -= U), w < 15 && (m += L[i++] << w, w += 8, m += L[i++] << w, w += 8), A = y[m & v]; r: for (;;) { if (U = A >>> 24, m >>>= U, w -= U, !(16 & (U = A >>> 16 & 255))) { if (0 == (64 & U)) { A = y[(65535 & A) + (m & (1 << U) - 1)]; continue r } e.msg = "invalid distance code", r.mode = 30; break e } if (E = 65535 & A, U &= 15, w < U && (m += L[i++] << w, (w += 8) < U && (m += L[i++] << w, w += 8)), (E += m & (1 << U) - 1) > u) { e.msg = "invalid distance too far back", r.mode = 30; break e } if (m >>>= U, w -= U, U = s - d, E > U) { if ((U = E - U) > f && r.sane) { e.msg = "invalid distance too far back", r.mode = 30; break e } if (k = 0, B = p, 0 === h) { if (k += c - U, U < x) { x -= U; do { W[s++] = p[k++] } while (--U); k = s - E, B = W } } else if (h < U) { if (k += c + h - U, (U -= h) < x) { x -= U; do { W[s++] = p[k++] } while (--U); if (k = 0, h < x) { U = h, x -= U; do { W[s++] = p[k++] } while (--U); k = s - E, B = W } } } else if (k += h - U, U < x) { x -= U; do { W[s++] = p[k++] } while (--U); k = s - E, B = W } for (; x > 2;) W[s++] = B[k++], W[s++] = B[k++], W[s++] = B[k++], x -= 3; x && (W[s++] = B[k++], x > 1 && (W[s++] = B[k++])) } else { k = s - E; do { W[s++] = W[k++], W[s++] = W[k++], W[s++] = W[k++], x -= 3 } while (x > 2); x && (W[s++] = W[k++], x > 1 && (W[s++] = W[k++])) } break } } break } } while (i < a && s < l); x = w >> 3, i -= x, w -= x << 3, m &= (1 << w) - 1, e.next_in = i, e.next_out = s, e.avail_in = i < a ? a - i + 5 : 5 - (i - a), e.avail_out = s < l ? l - s + 257 : 257 - (s - l), r.hold = m, r.bits = w } }, "zlib/inftrees.js": function(e, t, r) { "use strict"; var n = e("../utils/common"), o = 15, u = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], c = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], f = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], h = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64]; t.exports = function(e, t, r, p, m, w, b, y) { var g, v, A, U, x, E, k, B, L, W = y.bits, M = 0, O = 0, N = 0, R = 0, C = 0, I = 0, H = 0, S = 0, P = 0, T = 0, D = null, F = 0, z = new n.Buf16(16), V = new n.Buf16(16), q = null, Z = 0; for (M = 0; M <= o; M++) z[M] = 0; for (O = 0; O < p; O++) z[t[r + O]]++; for (C = W, R = o; R >= 1 && 0 === z[R]; R--); if (C > R && (C = R), 0 === R) return m[w++] = 20971520, m[w++] = 20971520, y.bits = 1, 0; for (N = 1; N < R && 0 === z[N]; N++); for (C < N && (C = N), S = 1, M = 1; M <= o; M++) if (S <<= 1, (S -= z[M]) < 0) return -1; if (S > 0 && (0 === e || 1 !== R)) return -1; for (V[1] = 0, M = 1; M < o; M++) V[M + 1] = V[M] + z[M]; for (O = 0; O < p; O++) 0 !== t[r + O] && (b[V[t[r + O]]++] = O); if (0 === e ? (D = q = b, E = 19) : 1 === e ? (D = u, F -= 257, q = c, Z -= 257, E = 256) : (D = f, q = h, E = -1), T = 0, O = 0, M = N, x = w, I = C, H = 0, A = -1, P = 1 << C, U = P - 1, 1 === e && P > 852 || 2 === e && P > 592) return 1; for (;;) { k = M - H, b[O] < E ? (B = 0, L = b[O]) : b[O] > E ? (B = q[Z + b[O]], L = D[F + b[O]]) : (B = 96, L = 0), g = 1 << M - H, v = 1 << I, N = v; do { v -= g, m[x + (T >> H) + v] = k << 24 | B << 16 | L | 0 } while (0 !== v); for (g = 1 << M - 1; T & g;) g >>= 1; if (0 !== g ? (T &= g - 1, T += g) : T = 0, O++, 0 == --z[M]) { if (M === R) break; M = t[r + b[O]] } if (M > C && (T & U) !== A) { for (0 === H && (H = C), x += N, I = M - H, S = 1 << I; I + H < R && !((S -= z[I + H]) <= 0);) I++, S <<= 1; if (P += 1 << I, 1 === e && P > 852 || 2 === e && P > 592) return 1; A = T & U, m[A] = C << 24 | I << 16 | x - w | 0 } } return 0 !== T && (m[x + T] = M - H << 24 | 64 << 16 | 0), y.bits = C, 0 } } }; for (var r in t) t[r].folder = r.substring(0, r.lastIndexOf("/") + 1); var n = function(e) { var r = []; return e = e.split("/").every(function(e) { return ".." == e ? r.pop() : "." == e || "" == e || r.push(e) }) ? r.join("/") : null, e ? t[e] || t[e + ".js"] || t[e + "/index.js"] : null }, o = function(e, t) { return e ? n(e.folder + "node_modules/" + t) || o(e.parent, t) : null }, i = function(e, t) { var r = t.match(/^\//) ? null : e ? t.match(/^\.\.?\//) ? n(e.folder + t) : o(e, t) : n(t); if (!r) throw "module not found: " + t; return r.exports || (r.parent = e, r(i.bind(null, r), r, r.exports = {})), r.exports }; return i(null, e) }, decompress: function(e) { this.exports || (this.exports = this.require("inflate.js")); try { return this.exports.inflate(e) } catch (e) {} }, hasUnityMarker: function(e) { var t = 10, r = "UnityWeb Compressed Content (gzip)"; if (t > e.length || 31 != e[0] || 139 != e[1]) return !1; var n = e[3]; if (4 & n) { if (t + 2 > e.length) return !1; if ((t += 2 + e[t] + (e[t + 1] << 8)) > e.length) return !1 } if (8 & n) { for (; t < e.length && e[t];) t++; if (t + 1 > e.length) return !1; t++ } return 16 & n && String.fromCharCode.apply(null, e.subarray(t, t + r.length + 1)) == r + "\0" } }, brotli: { require: function(e) { var t = { "decompress.js": function(e, t, r) { t.exports = e("./dec/decode").BrotliDecompressBuffer }, "dec/bit_reader.js": function(e, t, r) { function n(e) { this.buf_ = new Uint8Array(i), this.input_ = e, this.reset() } const o = 4096, i = 8224, s = new Uint32Array([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215]); n.READ_SIZE = o, n.IBUF_MASK = 8191, n.prototype.reset = function() { this.buf_ptr_ = 0, this.val_ = 0, this.pos_ = 0, this.bit_pos_ = 0, this.bit_end_pos_ = 0, this.eos_ = 0, this.readMoreInput(); for (var e = 0; e < 4; e++) this.val_ |= this.buf_[this.pos_] << 8 * e, ++this.pos_; return this.bit_end_pos_ > 0 }, n.prototype.readMoreInput = function() { if (!(this.bit_end_pos_ > 256)) if (this.eos_) { if (this.bit_pos_ > this.bit_end_pos_) throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_) } else { var e = this.buf_ptr_, t = this.input_.read(this.buf_, e, o); if (t < 0) throw new Error("Unexpected end of input"); if (t < o) { this.eos_ = 1; for (var r = 0; r < 32; r++) this.buf_[e + t + r] = 0 } if (0 === e) { for (var r = 0; r < 32; r++) this.buf_[8192 + r] = this.buf_[r]; this.buf_ptr_ = o } else this.buf_ptr_ = 0; this.bit_end_pos_ += t << 3 } }, n.prototype.fillBitWindow = function() { for (; this.bit_pos_ >= 8;) this.val_ >>>= 8, this.val_ |= this.buf_[8191 & this.pos_] << 24, ++this.pos_, this.bit_pos_ = this.bit_pos_ - 8 >>> 0, this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0 }, n.prototype.readBits = function(e) { 32 - this.bit_pos_ < e && this.fillBitWindow(); var t = this.val_ >>> this.bit_pos_ & s[e]; return this.bit_pos_ += e, t }, t.exports = n }, "dec/context.js": function(e, t, r) { r.lookup = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12, 12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12, 12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), r.lookupOffsets = new Uint16Array([1024, 1536, 1280, 1536, 0, 256, 768, 512]) }, "dec/decode.js": function(e, t, r) { function n(e) { var t; return 0 === e.readBits(1) ? 16 : (t = e.readBits(3), t > 0 ? 17 + t : (t = e.readBits(3), t > 0 ? 8 + t : 17)) } function o(e) { if (e.readBits(1)) { var t = e.readBits(3); return 0 === t ? 1 : e.readBits(t) + (1 << t) } return 0 } function i() { this.meta_block_length = 0, this.input_end = 0, this.is_uncompressed = 0, this.is_metadata = !1 } function a(e) { var t, r, n, o = new i; if (o.input_end = e.readBits(1), o.input_end && e.readBits(1)) return o; if (7 === (t = e.readBits(2) + 4)) { if (o.is_metadata = !0, 0 !== e.readBits(1)) throw new Error("Invalid reserved bit"); if (0 === (r = e.readBits(2))) return o; for (n = 0; n < r; n++) { var a = e.readBits(8); if (n + 1 === r && r > 1 && 0 === a) throw new Error("Invalid size byte"); o.meta_block_length |= a << 8 * n } } else for (n = 0; n < t; ++n) { var s = e.readBits(4); if (n + 1 === t && t > 4 && 0 === s) throw new Error("Invalid size nibble"); o.meta_block_length |= s << 4 * n } return ++o.meta_block_length, o.input_end || o.is_metadata || (o.is_uncompressed = e.readBits(1)), o } function s(e, t, r) { var n; return r.fillBitWindow(), t += r.val_ >>> r.bit_pos_ & D, n = e[t].bits - T, n > 0 && (r.bit_pos_ += T, t += e[t].value, t += r.val_ >>> r.bit_pos_ & (1 << n) - 1), r.bit_pos_ += e[t].bits, e[t].value } function d(e, t, r, n) { for (var o = 0, i = N, a = 0, s = 0, d = 32768, l = [], u = 0; u < 32; u++) l.push(new B(0, 0)); for (L(l, 0, 5, e, z); o < t && d > 0;) { var c, f = 0; if (n.readMoreInput(), n.fillBitWindow(), f += n.val_ >>> n.bit_pos_ & 31, n.bit_pos_ += l[f].bits, (c = 255 & l[f].value) < R) a = 0, r[o++] = c, 0 !== c && (i = c, d -= 32768 >> c); else { var h, p, m = c - 14, w = 0; if (c === R && (w = i), s !== w && (a = 0, s = w), h = a, a > 0 && (a -= 2, a <<= m), a += n.readBits(m) + 3, p = a - h, o + p > t) throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols"); for (var b = 0; b < p; b++) r[o + b] = s; o += p, 0 !== s && (d -= p << 15 - s) } } if (0 !== d) throw new Error("[ReadHuffmanCodeLengths] space = " + d); for (; o < t; o++) r[o] = 0 } function l(e, t, r, n) { var o, i = 0, a = new Uint8Array(e); if (n.readMoreInput(), 1 === (o = n.readBits(2))) { for (var s, l = e - 1, u = 0, c = new Int32Array(4), f = n.readBits(2) + 1; l;) l >>= 1, ++u; for (s = 0; s < f; ++s) c[s] = n.readBits(u) % e, a[c[s]] = 2; switch (a[c[0]] = 1, f) { case 1: break; case 3: if (c[0] === c[1] || c[0] === c[2] || c[1] === c[2]) throw new Error("[ReadHuffmanCode] invalid symbols"); break; case 2: if (c[0] === c[1]) throw new Error("[ReadHuffmanCode] invalid symbols"); a[c[1]] = 1; break; case 4: if (c[0] === c[1] || c[0] === c[2] || c[0] === c[3] || c[1] === c[2] || c[1] === c[3] || c[2] === c[3]) throw new Error("[ReadHuffmanCode] invalid symbols"); n.readBits(1) ? (a[c[2]] = 3, a[c[3]] = 3) : a[c[0]] = 2 } } else { var s, h = new Uint8Array(z), p = 32, m = 0, w = [new B(2, 0), new B(2, 4), new B(2, 3), new B(3, 2), new B(2, 0), new B(2, 4), new B(2, 3), new B(4, 1), new B(2, 0), new B(2, 4), new B(2, 3), new B(3, 2), new B(2, 0), new B(2, 4), new B(2, 3), new B(4, 5)]; for (s = o; s < z && p > 0; ++s) { var b, y = V[s], g = 0; n.fillBitWindow(), g += n.val_ >>> n.bit_pos_ & 15, n.bit_pos_ += w[g].bits, b = w[g].value, h[y] = b, 0 !== b && (p -= 32 >> b, ++m) } if (1 !== m && 0 !== p) throw new Error("[ReadHuffmanCode] invalid num_codes or space"); d(h, e, a, n) } if (0 === (i = L(t, r, T, a, e))) throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: "); return i } function u(e, t, r) { var n, o; return n = s(e, t, r), o = M.kBlockLengthPrefixCode[n].nbits, M.kBlockLengthPrefixCode[n].offset + r.readBits(o) } function c(e, t, r) { var n; return e < q ? (r += Z[e], r &= 3, n = t[r] + Y[e]) : n = e - q + 1, n } function f(e, t) { for (var r = e[t], n = t; n; --n) e[n] = e[n - 1]; e[0] = r } function h(e, t) { var r, n = new Uint8Array(256); for (r = 0; r < 256; ++r) n[r] = r; for (r = 0; r < t; ++r) { var o = e[r]; e[r] = n[o], o && f(n, o) } } function p(e, t) { this.alphabet_size = e, this.num_htrees = t, this.codes = new Array(t + t * G[e + 31 >>> 5]), this.htrees = new Uint32Array(t) } function m(e, t) { var r, n, i, a = { num_htrees: null, context_map: null }, d = 0; t.readMoreInput(); var u = a.num_htrees = o(t) + 1, c = a.context_map = new Uint8Array(e); if (u <= 1) return a; for (r = t.readBits(1), r && (d = t.readBits(4) + 1), n = [], i = 0; i < F; i++) n[i] = new B(0, 0); for (l(u + d, n, 0, t), i = 0; i < e;) { var f; if (t.readMoreInput(), 0 === (f = s(n, 0, t))) c[i] = 0, ++i; else if (f <= d) for (var p = 1 + (1 << f) + t.readBits(f); --p;) { if (i >= e) throw new Error("[DecodeContextMap] i >= context_map_size"); c[i] = 0, ++i } else c[i] = f - d, ++i } return t.readBits(1) && h(c, e), a } function w(e, t, r, n, o, i, a) { var d, l = 2 * r, u = r, c = s(t, r * F, a); d = 0 === c ? o[l + (1 & i[u])] : 1 === c ? o[l + (i[u] - 1 & 1)] + 1 : c - 2, d >= e && (d -= e), n[r] = d, o[l + (1 & i[u])] = d, ++i[u] } function b(e, t, r, n, o, i) { var a, s = o + 1, d = r & o, l = i.pos_ & E.IBUF_MASK; if (t < 8 || i.bit_pos_ + (t << 3) < i.bit_end_pos_) for (; t-- > 0;) i.readMoreInput(), n[d++] = i.readBits(8), d === s && (e.write(n, s), d = 0); else { if (i.bit_end_pos_ < 32) throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32"); for (; i.bit_pos_ < 32;) n[d] = i.val_ >>> i.bit_pos_, i.bit_pos_ += 8, ++d, --t; if (a = i.bit_end_pos_ - i.bit_pos_ >> 3, l + a > E.IBUF_MASK) { for (var u = E.IBUF_MASK + 1 - l, c = 0; c < u; c++) n[d + c] = i.buf_[l + c]; a -= u, d += u, t -= u, l = 0 } for (var c = 0; c < a; c++) n[d + c] = i.buf_[l + c]; if (d += a, t -= a, d >= s) { e.write(n, s), d -= s; for (var c = 0; c < d; c++) n[c] = n[s + c] } for (; d + t >= s;) { if (a = s - d, i.input_.read(n, d, a) < a) throw new Error("[CopyUncompressedBlockToOutput] not enough bytes"); e.write(n, s), t -= a, d = 0 } if (i.input_.read(n, d, t) < t) throw new Error("[CopyUncompressedBlockToOutput] not enough bytes"); i.reset() } } function y(e) { var t = e.bit_pos_ + 7 & -8; return 0 == e.readBits(t - e.bit_pos_) } function g(e) { var t = new U(e), r = new E(t); return n(r), a(r).meta_block_length } function v(e, t) { var r = new U(e); null == t && (t = g(e)); var n = new Uint8Array(t), o = new x(n); return A(r, o), o.pos < o.buffer.length && (o.buffer = o.buffer.subarray(0, o.pos)), o.buffer } function A(e, t) { var r, i, d, f, h, g, v, A, U, x = 0, L = 0, N = 0, R = 0, T = [16, 15, 11, 4], D = 0, z = 0, V = 0, Z = [new p(0, 0), new p(0, 0), new p(0, 0)]; const Y = 128 + E.READ_SIZE; U = new E(e), N = n(U), i = (1 << N) - 16, d = 1 << N, f = d - 1, h = new Uint8Array(d + Y + k.maxDictionaryWordLength), g = d, v = [], A = []; for (var G = 0; G < 3240; G++) v[G] = new B(0, 0), A[G] = new B(0, 0); for (; !L;) { var J, j, X, K, Q, _, $, ee, te, re = 0, ne = [1 << 28, 1 << 28, 1 << 28], oe = [0], ie = [1, 1, 1], ae = [0, 1, 0, 1, 0, 1], se = [0], de = null, le = null, ue = null, ce = 0, fe = null, he = 0, pe = 0, me = null, we = 0, be = 0, ye = 0; for (r = 0; r < 3; ++r) Z[r].codes = null, Z[r].htrees = null; U.readMoreInput(); var ge = a(U); if (re = ge.meta_block_length, x + re > t.buffer.length) { var ve = new Uint8Array(x + re); ve.set(t.buffer), t.buffer = ve } if (L = ge.input_end, J = ge.is_uncompressed, ge.is_metadata) for (y(U); re > 0; --re) U.readMoreInput(), U.readBits(8); else if (0 !== re) if (J) U.bit_pos_ = U.bit_pos_ + 7 & -8, b(t, re, x, h, f, U), x += re; else { for (r = 0; r < 3; ++r) ie[r] = o(U) + 1, ie[r] >= 2 && (l(ie[r] + 2, v, r * F, U), l(H, A, r * F, U), ne[r] = u(A, r * F, U), se[r] = 1); for (U.readMoreInput(), j = U.readBits(2), X = q + (U.readBits(4) << j), K = (1 << j) - 1, Q = X + (48 << j), le = new Uint8Array(ie[0]), r = 0; r < ie[0]; ++r) U.readMoreInput(), le[r] = U.readBits(2) << 1; var Ae = m(ie[0] << S, U); _ = Ae.num_htrees, de = Ae.context_map; var Ue = m(ie[2] << P, U); for ($ = Ue.num_htrees, ue = Ue.context_map, Z[0] = new p(C, _), Z[1] = new p(I, ie[1]), Z[2] = new p(Q, $), r = 0; r < 3; ++r) Z[r].decode(U); for (fe = 0, me = 0, ee = le[oe[0]], be = W.lookupOffsets[ee], ye = W.lookupOffsets[ee + 1], te = Z[1].htrees[0]; re > 0;) { var xe, Ee, ke, Be, Le, We, Me, Oe, Ne, Re, Ce; for (U.readMoreInput(), 0 === ne[1] && (w(ie[1], v, 1, oe, ae, se, U), ne[1] = u(A, F, U), te = Z[1].htrees[oe[1]]), --ne[1], xe = s(Z[1].codes, te, U), Ee = xe >> 6, Ee >= 2 ? (Ee -= 2, Me = -1) : Me = 0, ke = M.kInsertRangeLut[Ee] + (xe >> 3 & 7), Be = M.kCopyRangeLut[Ee] + (7 & xe), Le = M.kInsertLengthPrefixCode[ke].offset + U.readBits(M.kInsertLengthPrefixCode[ke].nbits), We = M.kCopyLengthPrefixCode[Be].offset + U.readBits(M.kCopyLengthPrefixCode[Be].nbits), z = h[x - 1 & f], V = h[x - 2 & f], Re = 0; Re < Le; ++Re) U.readMoreInput(), 0 === ne[0] && (w(ie[0], v, 0, oe, ae, se, U), ne[0] = u(A, 0, U), ce = oe[0] << S, fe = ce, ee = le[oe[0]], be = W.lookupOffsets[ee], ye = W.lookupOffsets[ee + 1]), Ne = W.lookup[be + z] | W.lookup[ye + V], he = de[fe + Ne], --ne[0], V = z, z = s(Z[0].codes, Z[0].htrees[he], U), h[x & f] = z, (x & f) === f && t.write(h, d), ++x; if ((re -= Le) <= 0) break; if (Me < 0) { var Ne; if (U.readMoreInput(), 0 === ne[2] && (w(ie[2], v, 2, oe, ae, se, U), ne[2] = u(A, 2160, U), pe = oe[2] << P, me = pe), --ne[2], Ne = 255 & (We > 4 ? 3 : We - 2), we = ue[me + Ne], (Me = s(Z[2].codes, Z[2].htrees[we], U)) >= X) { var Ie, He, Se; Me -= X, He = Me & K, Me >>= j, Ie = 1 + (Me >> 1), Se = (2 + (1 & Me) << Ie) - 4, Me = X + (Se + U.readBits(Ie) << j) + He } } if ((Oe = c(Me, T, D)) < 0) throw new Error("[BrotliDecompress] invalid distance"); if (R = x < i && R !== i ? x : i, Ce = x & f, Oe > R) { if (!(We >= k.minDictionaryWordLength && We <= k.maxDictionaryWordLength)) throw new Error("Invalid backward reference. pos: " + x + " distance: " + Oe + " len: " + We + " bytes left: " + re); var Se = k.offsetsByLength[We], Pe = Oe - R - 1, Te = k.sizeBitsByLength[We], De = (1 << Te) - 1, Fe = Pe & De, ze = Pe >> Te; if (Se += Fe * We, !(ze < O.kNumTransforms)) throw new Error("Invalid backward reference. pos: " + x + " distance: " + Oe + " len: " + We + " bytes left: " + re); var Ve = O.transformDictionaryWord(h, Ce, Se, We, ze); if (Ce += Ve, x += Ve, re -= Ve, Ce >= g) { t.write(h, d); for (var qe = 0; qe < Ce - g; qe++) h[qe] = h[g + qe] } } else { if (Me > 0 && (T[3 & D] = Oe, ++D), We > re) throw new Error("Invalid backward reference. pos: " + x + " distance: " + Oe + " len: " + We + " bytes left: " + re); for (Re = 0; Re < We; ++Re) h[x & f] = h[x - Oe & f], (x & f) === f && t.write(h, d), ++x, --re } z = h[x - 1 & f], V = h[x - 2 & f] } x &= 1073741823 } } t.write(h, x & f) } var U = e("./streams").BrotliInput, x = e("./streams").BrotliOutput, E = e("./bit_reader"), k = e("./dictionary"), B = e("./huffman").HuffmanCode, L = e("./huffman").BrotliBuildHuffmanTable, W = e("./context"), M = e("./prefix"), O = e("./transform"); const N = 8, R = 16, C = 256, I = 704, H = 26, S = 6, P = 2, T = 8, D = 255, F = 1080, z = 18, V = new Uint8Array([1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15]), q = 16, Z = new Uint8Array([3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2]), Y = new Int8Array([0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3]), G = new Uint16Array([256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694, 726, 758, 790, 822, 854, 886, 920, 952, 984, 1016, 1048, 1080]); p.prototype.decode = function(e) { var t, r, n = 0; for (t = 0; t < this.num_htrees; ++t) this.htrees[t] = n, r = l(this.alphabet_size, this.codes, n, e), n += r }, r.BrotliDecompressedSize = g, r.BrotliDecompressBuffer = v, r.BrotliDecompress = A, k.init() }, "dec/dictionary.js": function(e, t, r) { var n = e("./dictionary-browser"); r.init = function() { r.dictionary = n.init() }, r.offsetsByLength = new Uint32Array([0, 0, 0, 0, 0, 4096, 9216, 21504, 35840, 44032, 53248, 63488, 74752, 87040, 93696, 100864, 104704, 106752, 108928, 113536, 115968, 118528, 119872, 121280, 122016]), r.sizeBitsByLength = new Uint8Array([0, 0, 0, 0, 10, 10, 11, 11, 10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 8, 7, 7, 6, 6, 5, 5]), r.minDictionaryWordLength = 4, r.maxDictionaryWordLength = 24 }, "dec/dictionary.bin.js": function(e, t, r) { t.exports = "